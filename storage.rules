rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        firestore.exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        firestore.get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function hasEditProductsPermission() {
      return isAuthenticated() &&
        (isAdmin() || 
         firestore.get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.hasAny(['edit_products']));
    }

    // Product photos
    match /product-photos/{fileName} {
      // Anyone authenticated can read photos
      allow read: if isAuthenticated();
      
      // Only users with edit_products permission can upload
      allow create: if hasEditProductsPermission() &&
        // Validate file is an image and under 5MB
        request.resource.size < 5 * 1024 * 1024 &&
        request.resource.contentType.matches('image/.*');
      
      // Only admins can delete photos
      allow delete: if isAdmin();
    }
  }
} 